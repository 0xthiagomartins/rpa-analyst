"""Testes para o formul√°rio de identifica√ß√£o."""
import pytest
from unittest.mock import Mock, patch
import streamlit as st
from src.views.components.forms.identification_form import IdentificationForm
from src.views.components.state.suggestions_buffer import SuggestionsState, SuggestionBuffer
from datetime import datetime

@pytest.fixture
def identification_form():
    """Fixture que fornece uma inst√¢ncia do IdentificationForm."""
    return IdentificationForm()  # Removido api_key pois n√£o √© mais necess√°rio

@pytest.fixture
def mock_session_state():
    """Fixture que fornece um mock do session_state."""
    class SessionState(dict):
        def __setattr__(self, name, value):
            self[name] = value
        def __getattr__(self, name):
            return self.get(name)
            
    with patch.object(st, 'session_state', SessionState()) as mock_state:
        yield mock_state

@pytest.fixture
def mock_streamlit():
    """Fixture que fornece mocks das fun√ß√µes do Streamlit."""
    with patch('streamlit.write') as mock_write, \
         patch('streamlit.text_area') as mock_text_area, \
         patch('streamlit.text_input') as mock_text_input, \
         patch('streamlit.button') as mock_button, \
         patch('streamlit.columns') as mock_columns, \
         patch('streamlit.error') as mock_error:
        yield {
            'write': mock_write,
            'text_area': mock_text_area,
            'text_input': mock_text_input,
            'button': mock_button,
            'columns': mock_columns,
            'error': mock_error
        }

@pytest.mark.asyncio  # Marca o teste como ass√≠ncrono
async def test_render_basic_form(identification_form, mock_streamlit, mock_session_state):
    """Testa renderiza√ß√£o b√°sica do formul√°rio."""
    await identification_form.render()
    
    # Verifica se o t√≠tulo foi chamado (pode ser chamado mais de uma vez)
    mock_streamlit['write'].assert_any_call("### üéØ Identifica√ß√£o do Processo")
    assert mock_streamlit['text_input'].call_count == 3
    assert mock_streamlit['text_area'].call_count == 1

@pytest.mark.asyncio
async def test_render_with_suggestions(identification_form, mock_streamlit, mock_session_state):
    """Testa renderiza√ß√£o com sugest√µes dispon√≠veis."""
    # Configura buffer de sugest√µes
    buffer = SuggestionBuffer(
        timestamp=datetime.now(),
        description="Teste",
        forms_data={
            "identification": {
                "data": {
                    "process_name": "Nome sugerido",
                    "responsible": "Respons√°vel sugerido"
                }
            }
        },
        suggestions=["Sugest√£o 1"],
        validation=["Valida√ß√£o 1"]
    )
    SuggestionsState.set_buffer(buffer)
    
    await identification_form.render()
    
    # Verifica se preview foi renderizado
    assert mock_streamlit['write'].call_count > 1

@pytest.mark.asyncio
async def test_render_suggestion_error(identification_form, mock_streamlit, mock_session_state):
    """Testa erro ao gerar sugest√µes."""
    mock_session_state.update({
        'description': "Descri√ß√£o teste",
        'requesting_suggestions': True
    })
    
    await identification_form.render()
    
    # Verifica se erro foi mostrado
    mock_streamlit['error'].assert_called_once()

@pytest.mark.asyncio
async def test_render_with_existing_data(identification_form, mock_streamlit, mock_session_state):
    """Testa renderiza√ß√£o com dados existentes."""
    # Configura dados existentes
    mock_session_state.update({
        'process_name': "Nome existente",
        'responsible': "Respons√°vel existente",
        'area': "√Årea existente",
        'description': "Descri√ß√£o existente"
    })
    
    await identification_form.render()
    
    # Verifica se campos foram preenchidos com dados existentes
    calls = mock_streamlit['text_input'].call_args_list
    assert calls[0][1]['value'] == "Nome existente"
    assert calls[1][1]['value'] == "Respons√°vel existente"
    assert calls[2][1]['value'] == "√Årea existente" 