"""M√≥dulo do formul√°rio principal."""
from typing import Dict, Any, Optional, List
import streamlit as st
from utils.container_interface import ContainerInterface
from controllers.process_controller import ProcessController

class ProcessForm:
    """Classe principal do formul√°rio de processo."""
    
    def __init__(self, container: Optional[ContainerInterface] = None):
        """Inicializa o formul√°rio."""
        self.container = container or DependencyContainer()
        self.controller = self.container.resolve(ProcessController)
        self._data: Dict[str, Any] = {}
        self._current_step = 0
        
        # Inicializa estado se necess√°rio
        if 'process_data' not in st.session_state:
            st.session_state.process_data = {}
    
    def render(self) -> None:
        """Renderiza o formul√°rio."""
        st.write("### üìù Formul√°rio do Processo")
        
        # Tabs principais
        tab_info, tab_details = st.tabs(["‚ÑπÔ∏è Informa√ß√µes B√°sicas", "üìã Detalhes"])
        
        with tab_info:
            self._render_basic_info()
            
        with tab_details:
            self._render_details()
    
    def _render_basic_info(self) -> None:
        """Renderiza se√ß√£o de informa√ß√µes b√°sicas."""
        col1, col2 = st.columns(2)
        
        with col1:
            st.text_input(
                "Nome do Processo",
                key="process_name",
                value=self._data.get("process_name", ""),
                help="Nome do processo a ser automatizado"
            )
            
            st.text_input(
                "Respons√°vel",
                key="process_owner",
                value=self._data.get("process_owner", ""),
                help="Respons√°vel pelo processo"
            )
        
        with col2:
            st.selectbox(
                "Departamento",
                options=["TI", "RH", "Financeiro", "Comercial", "Opera√ß√µes"],
                key="department",
                index=0 if not self._data.get("department") else None,
                help="Departamento respons√°vel pelo processo"
            )
            
            st.selectbox(
                "Status",
                options=["Em An√°lise", "Em Desenvolvimento", "Conclu√≠do"],
                key="status",
                index=0 if not self._data.get("status") else None,
                help="Status atual do processo"
            )
    
    def _render_details(self) -> None:
        """Renderiza se√ß√£o de detalhes."""
        st.text_area(
            "Descri√ß√£o",
            key="description",
            value=self._data.get("description", ""),
            help="Descri√ß√£o detalhada do processo"
        )
        
        st.text_area(
            "Objetivos",
            key="objectives",
            value=self._data.get("objectives", ""),
            help="Objetivos da automa√ß√£o"
        )
        
        # Bot√µes de a√ß√£o
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ Salvar", use_container_width=True):
                self._save_form()
        
        with col2:
            if st.button("üîÑ Limpar", use_container_width=True):
                self._clear_form()
        
        with col3:
            if st.button("‚ùå Cancelar", use_container_width=True):
                self._cancel_form()
    
    def _save_form(self) -> None:
        """Salva os dados do formul√°rio."""
        try:
            # Coleta dados dos campos
            form_data = {
                "process_name": st.session_state.get("process_name", ""),
                "process_owner": st.session_state.get("process_owner", ""),
                "department": st.session_state.get("department", ""),
                "status": st.session_state.get("status", ""),
                "description": st.session_state.get("description", ""),
                "objectives": st.session_state.get("objectives", "")
            }
            
            # Valida dados
            if not form_data["process_name"]:
                st.error("Nome do processo √© obrigat√≥rio")
                return
            
            # Tenta salvar
            if self.controller.create_process(form_data):
                st.success("Processo salvo com sucesso!")
                self._clear_form()
            else:
                st.error("Erro ao salvar processo")
                
        except Exception as e:
            st.error(f"Erro ao salvar: {str(e)}")
    
    def _clear_form(self) -> None:
        """Limpa os campos do formul√°rio."""
        for key in [
            "process_name", "process_owner", "department",
            "status", "description", "objectives"
        ]:
            if key in st.session_state:
                del st.session_state[key]
        self._data = {}
        st.rerun()
    
    def _cancel_form(self) -> None:
        """Cancela a edi√ß√£o do formul√°rio."""
        self._clear_form()
        st.warning("Edi√ß√£o cancelada")

# Exporta a classe
__all__ = ['ProcessForm']